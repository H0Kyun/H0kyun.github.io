---
layout: post
title: 컴파일러와 인터프리터
subtitle: 컴파일러와 인터프리터의 차이, 하이브리드 언어에 대해 알아보자
categories: [etc]
---

컴파일러와 인터프리터는 에러 확인, 기계어로 번역, 프로그램의 실행 이렇게 세 가지 주요 기능의 작동 방식에서 차이를 가진다.

<h2 class="section-heading">컴파일러</h2>
컴파일러는 코드 파일 전체를 스캔하며 에러가 확인한다. 에러가 있으면 컴파일 에러를 알리고 에러가 없으면 기계어로 번역하고 실행 파일을 만들어 드라이브에 저장한다. 이 후에 실행에는 컴파일러가 하는 역할이 없다. 이미 만들어진 실행 파일만 있으면 계속해서 실행할 수 있다. 코드 파일을 수정한 후 다시 컴파일하면 컴파일러는 에러 확인 후 번역을 거쳐 새로운 실행 파일을 만든다.

실행 파일이 독립적이기 때문에 실행이 빠르다는 장점이 있지만 실행 파일이 독립적이기 때문에 플랫폼(OS) 의존성이 있다.

<h2 class="section-heading">인터프리터</h2>
인터프리터는 코드 파일을 한 줄 번역하고 한 줄 실행하기를 반복한다. 이 때문에 코드에 에러가 있어도 에러 발생 시점 전까지는 실행이 된다. 그리고 별개의 실행 파일은 만들어지지 않고 코드 파일을 실행할 때마다 인터프리터를 통해 번역과 실행을 반복해야 한다.

실행할 때마다 번역도 같이해 실행 속도는 느리지만 플랫폼에 맞춰 인터프리터를 설치하면 되므로 플랫폼으로부터 독립적이다.

<h2 class="section-heading">하이브리드 언어</h2>
JAVA와 C#이 대표적인 하이브리드 언어이다. 하이브리드 언어의 컴파일러는 에러를 확인하고 에러가 없으면 바이트 코드를 만든다. 그리고 해당 언어의 가상 머신이 바이트 코드를 기계어로 번역한 후 실행한다.

하이브리드 언어는 인터프리터 언어와 다르게 언어로부터 독립적인 실행 파일을 만들 수 있고 컴파일러의 단점이었던 플랫폼 의존성을 해결했다.
<br>
>###### 참고 자료
>###### [컴굥일지](https://gyong0117.tistory.com/entry/09-%ED%94%8C%EB%9E%AB%ED%8F%BC?category=1020696){: target="_blank"}
>###### [wake-up-neo](https://www.wake-up-neo.com/ko/c%2B%2B/c-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%80-%EC%9D%98%EC%A1%B4%EC%A0%81%EC%9E%85%EB%8B%88%EA%B9%8C/1068037048/amp/){: target="_blank"}
>###### [Learn C++ Programming](https://www.udemy.com/course/cpp-deep-dive/){: target="_blank"}