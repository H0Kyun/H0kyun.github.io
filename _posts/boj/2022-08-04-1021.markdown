---
layout: post
title: 1021
subtitle: 회전하는 큐
categories: [BOJ]
use_math: true
---

[문제 링크](https://www.acmicpc.net/problem/1021)

<h2 class="section-heading">풀이</h2>
자바에서 <code class="java">Deque</code> 인터페이스를 사용하려 했지만 찾으려는 수가 앞쪽으로 이동하는 게 빠른지 뒤로 이동하는 게 빠른지 비교하는 게 어려워 <code class="java">LinkedList</code>를 사용했다

1. 숫자들의 모음은 <code class="java">LinkedList</code>에 넣고 찾고 싶은 수를 큐에 담는다. 
2. <code class="java">LinkedList</code>에서 찾고 싶은 수의 인덱스를 찾아 그게 처음과 가까운지 끝과 가까운지 확인한다. 
    - 처음과 가까우면 수 모음의 첫 번째가 찾고 싶은 수가 될 때까지 2번 연산을 진행하고
    - 끝과 가까우면 수 모음의 첫 번째가 찾고 싶은 수가 될 때까지 3번 연산을 진행한다.
3. 연산이 종료되면 두 큐의 첫 값을 큐에서 빼준다.
4. 찾고 싶은 수를 담은 큐가 비어있을 때까지 반복한다.
<h2 class="section-heading">코드</h2>
C++  
코드 준비중...

JAVA
<pre><code class="java">import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		LinkedList<Integer> dequeue = new LinkedList<>();
		for(int i = 1; i <= N; i++) {
			dequeue.add(i);
		}
		Queue<Integer> mqueue = new ArrayDeque<>(N);
		st = new StringTokenizer(br.readLine(), " ");
		for(int i = 0; i < M; i++) {
			mqueue.add(Integer.parseInt(st.nextToken()));
		}
		
		int count = 0;
		while(!mqueue.isEmpty()) {
			int mFirst = mqueue.peek();
			int findIdx = dequeue.indexOf(mFirst);
			if(Math.abs(findIdx - 0) > Math.abs(findIdx - dequeue.size())) {				
				while(dequeue.peek() != mqueue.peek()) {
					count++;
					dequeue.addFirst(dequeue.removeLast());
				}
			} else {
				while(dequeue.peek() != mqueue.peek()) {
					count++;
					dequeue.addLast(dequeue.removeFirst());
				}
			}
			
			mqueue.poll();
			dequeue.poll();
		}
		
		System.out.println(count);
	}

}</code></pre>